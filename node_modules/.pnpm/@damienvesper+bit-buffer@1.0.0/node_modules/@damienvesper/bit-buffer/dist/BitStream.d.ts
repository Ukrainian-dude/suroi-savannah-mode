/// <reference types="node" />
import { BitView } from './BitView';
/**
 * Small wrapper for a BitView to maintain position,
 * as well as to handle reading / writing of string data
 * to the underlying buffer.
 */
declare class BitStream {
    private readonly _view;
    private _startIndex;
    private _length;
    private _index;
    constructor(source: ArrayBuffer | Buffer | BitView, byteOffset?: number, byteLength?: number);
    get index(): number;
    set index(val: number);
    get length(): number;
    set length(val: number);
    get bitsLeft(): number;
    get byteIndex(): number;
    set byteIndex(val: number);
    get buffer(): ArrayBufferLike;
    get view(): BitView;
    get bigEndian(): boolean;
    set bigEndian(val: boolean);
    reader: <T>(name: string, size: number) => () => T;
    writer: <T>(name: string, size: number) => (value: T) => void;
    readBits: (bits: number, signed?: boolean) => number;
    writeBits: (value: number, bits: number) => void;
    readBoolean: () => boolean;
    readInt8: () => number;
    readInt16: () => number;
    readInt32: () => number;
    readUint8: () => number;
    readUint16: () => number;
    readUint32: () => number;
    readFloat32: () => number;
    readFloat64: () => number;
    writeBoolean: (value: boolean) => void;
    writeInt8: (value: number) => void;
    writeInt16: (value: number) => void;
    writeInt32: (value: number) => void;
    writeUint8: (value: number) => void;
    writeUint16: (value: number) => void;
    writeUint32: (value: number) => void;
    writeFloat32: (value: number) => void;
    writeFloat64: (value: number) => void;
    readASCIIString: (bytes: number) => string;
    readUTF8String: (bytes: number) => string;
    writeASCIIString: (string: string, bytes: number) => void;
    writeUTF8String: (string: string, bytes: number) => void;
    readBitStream: (bitLength: number) => BitStream;
    writeBitStream: (stream: BitStream, length?: number) => void;
    readArrayBuffer: (byteLength: number) => ArrayBuffer;
    writeArrayBuffer: (buffer: Buffer, byteLength: number) => void;
}
export { BitStream };
//# sourceMappingURL=BitStream.d.ts.map
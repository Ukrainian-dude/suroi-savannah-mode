/// <reference types="node" />
/**
 * An interface provision to the standard DataView,
 * but with support for bit-level reads / writes.
 */
declare class BitView {
    private readonly _view;
    private readonly _scratch;
    bigEndian: boolean;
    constructor(source: ArrayBuffer | Buffer | BitView, byteOffset?: number, byteLength?: number);
    get buffer(): ArrayBufferLike;
    get byteLength(): number;
    private readonly _setBit;
    getBits: (offset: number, bits: number, signed: boolean) => number;
    setBits: (offset: number, value: number, bits: number) => void;
    getBoolean: (offset: number) => boolean;
    getInt8: (offset: number) => number;
    getInt16: (offset: number) => number;
    getInt32: (offset: number) => number;
    getUint8: (offset: number) => number;
    getUint16: (offset: number) => number;
    getUint32: (offset: number) => number;
    getFloat32: (offset: number) => number;
    getFloat64: (offset: number) => number;
    setBoolean: (offset: number, value: boolean) => void;
    setInt8: (offset: number, value: number) => void;
    setInt16: (offset: number, value: number) => void;
    setInt32: (offset: number, value: number) => void;
    setUint8: (offset: number, value: number) => void;
    setUint16: (offset: number, value: number) => void;
    setUint32: (offset: number, value: number) => void;
    setFloat32: (offset: number, value: number) => void;
    setFloat64: (offset: number, value: number) => void;
    getArrayBuffer: (offset: number, byteLength: number) => ArrayBuffer;
}
export { BitView };
//# sourceMappingURL=BitView.d.ts.map